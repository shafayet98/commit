{"mappings":"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","sources":["src/three_mmi.js"],"sourcesContent":["/*\n\tGithub: https://github.com/danielblagy/three_mmi\n\t\n\tMIT License\n\n\tCopyright (c) 2022 danielblagy\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\t\n\tYou can find an example project in the github repository (https://github.com/danielblagy/three_mmi) under folder\n\tnamed 'example'.\n\t\n\tUPDATES:\n\t1/19/2021: added support for the following even types: mouseenter, mouseleave, mousedown, mouseup\n\t1/20/2021: fixed bug: mouseleave event wouldn't trigger if there was mouseenter for\n\t\t\t\t\t\t\tanother mesh with the same name property\n\t\t\t\t\t\t\t\t(mistake in if condition, due to the utility using the mesh names)\n\t\t\t   added xylophone simulation example project\n\t9/25/2021: changed local variable 'event' to 'e' in function handleEvent(e), as is logically proper,\n\t\t\t\tand 'event' being deprecated\n\t4/9/2022:  updated license\n\t4/20/2022: fixed the grouping bug (when if meshes were in a group, mouse interactions wouldn't be registered by three_mmi)\n\t\n\tUSAGE:\n\t// pass threejs scene and camera\n\tconst mmi = new MouseMeshInteraction(scene, camera);\n\t\n\t// create an interactable mesh\n\tconst mesh = new THREE.Mesh(geometry, material);\n\t// specify a name for the mesh (needed for mmi to work, you can give the same name to multiple meshes)\n\tmesh.name = 'my_interactable_mesh';\n\tscene.add(mesh);\n\t\n\t// there are 7 types of interactions available:\n\t//\t\t* 'click' \t\t(left mouse button click)\n\t//\t\t* 'dblclick' \t(left mouse button double click)\n\t//\t\t* 'contextmenu' (right mouse button click, triggered before opening the context menu)\n\t//\t\t* 'mouseenter' \t(mouse cursor is moved onto the element that has the listener attached)\n\t//\t\t* 'mouseleave' \t(mouse cursor is moved off the element that has the listener attached)\n\t//\t\t* 'mousedown' \t(mouse button is pressed on an element)\n\t//\t\t* 'mouseup' \t(mouse button is released over an element)\n\t\n\t// create a handler for when user clicks on the mesh with name 'my_interactable_mesh'\n\tmmi.addHandler('my_interactable_mesh', 'click', function(mesh) {\n\t\tconsole.log('interactable mesh has been clicked!');\n\t\tconsole.log(mesh);\n\t});\n\t\n\t// put mmi.update() inside the graphics update function\n\tfunction animate() {\n\t\trequestAnimationFrame( animate );\n\t\t\n\t\tmmi.update();\n\t\t\n\t\trenderer.render( scene, camera );\n\t}\n\tanimate();\n\t\n\tQUICKSTART TEMPLATE:\n\t\n\tFor a project with the following structure:\n\tindex.html\n\tjs/three.js\n\tjs/three_mmi.js\n\t\n\t*index.html*\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<title>three_mmi Quickstart Template</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<script src=\"js/three.js\"></script>\n\t\t\t<script src=\"js/three_mmi.js\"></script>\n\t\t\t<script>\n\t\t\t\tconst scene = new THREE.Scene();\n\t\t\t\t\n\t\t\t\tconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\t\t\t\tcamera.position.set(0, 0, 50);\n\t\t\t\t\t\t\n\t\t\t\tconst renderer = new THREE.WebGLRenderer({antialias : true});\n\t\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\t\trenderer.setClearColor(0xe0b2a4, 1.0);\n\t\t\t\tdocument.body.appendChild(renderer.domElement);\n\t\t\t\t\n\t\t\t\t// create an interactable light buld mesh\n\t\t\t\t\n\t\t\t\tconst gray_color = new THREE.Color(0x57554f);\n\t\t\t\tconst yellow_color = new THREE.Color(0xe0c53a);\n\t\t\t\t\n\t\t\t\tconst bulb_geometry = new THREE.BoxGeometry(5, 5, 5);\n\t\t\t\t\n\t\t\t\tconst bulb_material = new THREE.MeshBasicMaterial( { color: yellow_color } );\n\t\t\t\t\n\t\t\t\tvar bulb_mesh = new THREE.Mesh(bulb_geometry, bulb_material);\n\t\t\t\t// add a name to the mesh (needed for mmi to work, you can give the same name to multiple meshes)\n\t\t\t\tbulb_mesh.name = 'bulb';\n\t\t\t\tbulb_mesh.position.set(0, 0, 0);\n\t\t\t\tscene.add(bulb_mesh);\n\t\t\t\t\n\t\t\t\t// initialize instance of class MouseMeshInteraction, passing threejs scene and camera\n\t\t\t\tconst mmi = new MouseMeshInteraction(scene, camera);\n\t\t\t\t\n\t\t\t\t// add a handler on mouse click for mesh (or meshes) with the name 'bulb'\n\t\t\t\tmmi.addHandler('bulb', 'click', function(mesh) {\n\t\t\t\t\tconsole.log('bulb mesh is being clicked!');\n\t\t\t\t\t// switch between colors\n\t\t\t\t\tif (mesh.material.color === gray_color) {\n\t\t\t\t\t\tmesh.material.color = yellow_color;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmesh.material.color = gray_color;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfunction render() {\n\t\t\t\t\trequestAnimationFrame(render);\n\t\t\t\t\t// update the mmi\n\t\t\t\t\tmmi.update();\n\t\t\t\t\trenderer.render(scene, camera);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trender();\n\t\t\t</script>\n\t\t</body>\n\t</html>\n*/\n\nclass MouseMeshInteractionHandler {\n\tconstructor(mesh_name, handler_function) {\n\t\tthis.mesh_name = mesh_name;\n\t\tthis.handler_function = handler_function;\n\t}\n}\n\nclass MouseMeshInteraction {\n\tconstructor(scene, camera) {\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\t\n\t\tthis.raycaster = new THREE.Raycaster();\n\t\tthis.mouse = new THREE.Vector2();\n\t\t\n\t\tthis.updated = false;\n\t\tthis.event = '';\n\t\t\n\t\t// last mesh that the mouse cursor was over\n\t\tthis.last_mouseenter_mesh = undefined;\n\t\t// last mesh that the mouse was pressing down\n\t\tthis.last_pressed_mesh = undefined;\n\t\t\n\t\tthis.handlers = new Map();\n\t\t\n\t\tthis.handlers.set('click', []);\n\t\tthis.handlers.set('dblclick', []);\n\t\tthis.handlers.set('contextmenu', []);\n\t\t\n\t\tthis.handlers.set('mousedown', []);\n\t\tthis.handlers.set('mouseup', []);\n\t\tthis.handlers.set('mouseenter', []);\n\t\tthis.handlers.set('mouseleave', []);\n\t\t\n\t\twindow.addEventListener('mousemove', this);\n\t\t\n\t\twindow.addEventListener('click', this);\n\t\twindow.addEventListener('dblclick', this);\n\t\twindow.addEventListener('contextmenu', this);\n\t\t\n\t\twindow.addEventListener('mousedown', this);\n\t}\n\t\n\thandleEvent(e) {\n\t\tswitch(e.type) {\n\t\t\tcase \"mousemove\": {\n\t\t\t\tthis.mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n\t\t\t\tthis.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n\t\t\t\tthis.updated = true;\n\t\t\t\tthis.event = 'motion';\n\t\t\t}\n\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tthis.updated = true;\n\t\t\t\tthis.event = e.type;\n\t\t\t}\n\t\t}\n\t}\n\t\n\taddHandler(mesh_name, event_type, handler_function) {\n\t\tif (this.handlers.has(event_type)) {\n\t\t\tthis.handlers.get(event_type).push(new MouseMeshInteractionHandler(mesh_name, handler_function));\n\t\t}\n\t}\n\t\n\tupdate() {\n\t\tif (this.updated) {\n\t\t\t// update the picking ray with the camera and mouse position\n\t\t\tthis.raycaster.setFromCamera(this.mouse, this.camera);\n\t\t\t\n\t\t\t// calculate objects intersecting the picking ray\n\t\t\tconst intersects = this.raycaster.intersectObjects(this.scene.children, true);\n\t\t\t\n\t\t\tif (intersects.length > 0) {\n\t\t\t\t// special test for events: 'mouseenter', 'mouseleave'\n\t\t\t\tif (this.event === 'motion') {\n\t\t\t\t\tlet mouseenter_handlers = this.handlers.get('mouseenter');\n\t\t\t\t\tlet mouseleave_handlers = this.handlers.get('mouseleave');\n\t\t\t\t\t\n\t\t\t\t\tif (mouseleave_handlers.length > 0) {\n\t\t\t\t\t\tfor (const handler of mouseleave_handlers) {\n\t\t\t\t\t\t\t// if mesh was entered by mouse previously, but not anymore, that means it has been mouseleave'd\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.last_mouseenter_mesh !== undefined\n\t\t\t\t\t\t\t\t&& intersects[0].object !== this.last_mouseenter_mesh\n\t\t\t\t\t\t\t\t&& handler.mesh_name === this.last_mouseenter_mesh.name\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\thandler.handler_function(this.last_mouseenter_mesh);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (mouseenter_handlers.length > 0) {\n\t\t\t\t\t\tfor (const handler of mouseenter_handlers) {\n\t\t\t\t\t\t\tif (handler.mesh_name === intersects[0].object.name && intersects[0].object !== this.last_mouseenter_mesh) {\n\t\t\t\t\t\t\t\tthis.last_mouseenter_mesh = intersects[0].object;\n\t\t\t\t\t\t\t\thandler.handler_function(intersects[0].object);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// if mouseup event has occurred\n\t\t\t\t\tif (this.event === 'click' && this.last_pressed_mesh === intersects[0].object) {\n\t\t\t\t\t\tfor (const handler of this.handlers.get('mouseup')) {\n\t\t\t\t\t\t\tif (handler.mesh_name === intersects[0].object.name) {\n\t\t\t\t\t\t\t\thandler.handler_function(intersects[0].object);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.last_pressed_mesh = undefined;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// for mouseup event handler to work\n\t\t\t\t\tif (this.event === 'mousedown') {\n\t\t\t\t\t\tthis.last_pressed_mesh = intersects[0].object;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlet handlers_of_event = this.handlers.get(this.event);\n\t\t\t\t\tfor (const handler of handlers_of_event) {\n\t\t\t\t\t\tif (handler.mesh_name === intersects[0].object.name) {\n\t\t\t\t\t\t\thandler.handler_function(intersects[0].object);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if mouse doesn't intersect any meshes\n\t\t\telse if (this.event === 'motion') {\n\t\t\t\t// special test for 'mouseleave' event\n\t\t\t\t// \t\t\t(since it may be triggered when cursor doesn't intersect with any meshes)\n\t\t\t\tfor (const handler of this.handlers.get('mouseleave')) {\n\t\t\t\t\t// if mesh was entered by mouse previously, but not anymore, that means it has been mouseleave'd\n\t\t\t\t\tif (this.last_mouseenter_mesh !== undefined && handler.mesh_name === this.last_mouseenter_mesh.name) {\n\t\t\t\t\t\thandler.handler_function(this.last_mouseenter_mesh);\n\t\t\t\t\t\tthis.last_mouseenter_mesh = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updated = false;\n\t\t}\n\t}\n}"],"names":[],"version":3,"file":"index.bff487c1.js.map","sourceRoot":"/__parcel_source_root/"}